<Window x:Class="ScreenShareAssist.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ScreenShareAssist"
        xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks" AllowsTransparency="False"
        mc:Ignorable="d" WindowStyle="None" MouseDown="Window_MouseDown" MouseDoubleClick="Window_MouseDoubleClick" MouseRightButtonDown="Window_MouseRightButtonDown"
        Title="Screen Share Assist" MinWidth="640" Foreground="White" Background="Black" MinHeight="480" Height="480" Width="853" ResizeMode="CanResize" Icon="icon.ico" SizeChanged="Window_SizeChanged" LocationChanged="Window_LocationChanged" Loaded="Window_Loaded" >
    <Window.Resources>
        <Style TargetType="Label">
            <Setter Property="Foreground" Value="White" />
        </Style>
        <Style TargetType="Grid">
            <Setter Property="Background" Value="#222" />
        </Style>
        <Style TargetType="StackPanel">
            <Setter Property="Background" Value="#222" />
        </Style>
        <Style TargetType="Button">
            <Setter Property="Background" Value="#111" />
            <Setter Property="Foreground" Value="#EEE" />
        </Style>

        <Style TargetType="{x:Type ComboBoxItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="#333" BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Left" Margin="4 5 0 5" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#333"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="#555"/>
                </Trigger>
            </Style.Triggers>
        </Style>


    </Window.Resources>
    <WindowChrome.WindowChrome>
        <WindowChrome     
        CaptionHeight="1"  
        CornerRadius ="0"
        ResizeBorderThickness="8"         
        GlassFrameThickness="0">
        </WindowChrome>
    </WindowChrome.WindowChrome>
    <Grid>


        <DockPanel Background="Black">
            <Image x:Name="cameraViewerImage" Height="{Binding SystemParameters.PrimaryScreenHeight}"  Width="{Binding SystemParameters.PrimaryScreenWidth}"  Stretch="Fill" StretchDirection="Both" />

            <Border Margin="5" Background="DarkRed" VerticalAlignment="Bottom" HorizontalAlignment="Left" CornerRadius="3" BorderBrush="Black" BorderThickness="2" >
                <Label x:Name="warningLabel" Visibility="Collapsed" MouseDoubleClick="bottomLabel_MouseDoubleClick" Content="There is an update available." HorizontalAlignment="Center" />
            </Border>
        </DockPanel>

        <Border x:Name="dockPanelBorder" BorderThickness="2" BorderBrush="Gray">

        </Border>

        <DockPanel>
            <DockPanel.Resources>
                <Style TargetType="Button">
                    <Setter Property="Background" Value="#222" />
                    <Setter Property="Foreground" Value="#DDD" />
                    <Setter Property="TextBlock.TextAlignment" Value="Center" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button" >
                                <Border MinHeight="25" Padding="5" Margin="3 0 3 0" CornerRadius="5" 
                        Background="{TemplateBinding Background}" BorderBrush="#ccc" 
                        BorderThickness="1" >
                                    <ContentPresenter x:Name="contentPresenter" 
                                      ContentTemplate="{TemplateBinding ContentTemplate}" 
                                      Content="{TemplateBinding Content}" 
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#555" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#777" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="{x:Type ToggleButton}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ToggleButton">
                                <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                Background="{TemplateBinding Background}">
                                    <ContentPresenter HorizontalAlignment="Center"                  
                                              VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
                <Style TargetType="{x:Type ComboBox}">
                    <Setter Property="Foreground" Value="#FFF" />
                    <Setter Property="BorderBrush" Value="Gray" />
                    <Setter Property="Background" Value="#222" />
                    <Setter Property="SnapsToDevicePixels" Value="true"/>
                    <Setter Property="OverridesDefaultStyle" Value="true"/>
                    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                    <Setter Property="FontSize" Value="13" />
                    <Setter Property="FontWeight" Value="Normal" />
                    <Setter Property="MinWidth" Value="50"/>
                    <Setter Property="MinHeight" Value="32"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBox">
                                <Border BorderThickness="1" CornerRadius="3" BorderBrush="Gray">
                                    <Grid>
                                        <Grid.OpacityMask>
                                            <VisualBrush Visual="{Binding ElementName=Mask}" />
                                        </Grid.OpacityMask>
                                        <Border x:Name="Mask" Background="Black"
                        BorderThickness=".5"
                        CornerRadius="5" />
                                        <ToggleButton 
                            BorderThickness="0"
                            Name="ToggleButton"
                            Background="{TemplateBinding Background}"
                            Foreground="{TemplateBinding Foreground}"
                            Grid.Column="2"
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press" />
                                        <iconPacks:PackIconControl Width="14" Kind="{x:Static iconPacks:PackIconBoxIconsKind.RegularCaretDown}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0 0 8 0" />
                                        <ContentPresenter
                            Name="ContentSite"
                            IsHitTestVisible="False"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="10,3,30,3" 
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                                        <Popup
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True"
                            Focusable="False"
                            PopupAnimation="Slide">
                                            <Grid
                              Name="DropDown"
                              SnapsToDevicePixels="True"               
                              MinWidth="{TemplateBinding ActualWidth}"  
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                                <Border
                                    x:Name="DropDownBorder"
                                    Background="#222"
                                    BorderThickness="1"
                                    BorderBrush="Gray"/>
                                                <StackPanel Background="#222" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                            </Grid>
                                        </Popup>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#333"/>
                                    </Trigger>
                                    <Trigger Property="HasItems" Value="false">
                                        <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                                    </Trigger>
                                    <Trigger Property="IsGrouping" Value="true">
                                        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                    </Trigger>
                                    <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                        <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                        <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DockPanel.Resources>

            <Grid x:Name="mainGrid" Margin="5" MouseDown="mainGrid_MouseDown" PreviewMouseDown="mainGrid_PreviewMouseDown" Opacity="0" d:Opacity="0.9" IsEnabled="False" d:IsEnabled="True">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Style.Resources>
                            <Storyboard x:Key="FadeIn">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="{x:Null}">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.98"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="{x:Null}">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="FadeOut">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="{x:Null}">
                                    <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="{x:Null}">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.0" Value="{x:Static Visibility.Visible}"/>
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="{x:Static Visibility.Collapsed}"/>
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsEnabled" Value="true">
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource FadeIn}"/>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource FadeOut}"/>
                                </Trigger.ExitActions>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="Visibility" Value="Collapsed" />
                    </Style>
                </Grid.Style>

                <Border Background="#ccc" CornerRadius="3" BorderBrush="#111" BorderThickness="2" Width="200" VerticalAlignment="Top" HorizontalAlignment="Left">
                    <StackPanel >
                        <Grid Margin="6" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="controlsGrid" >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <Label Grid.Row="0" Content="Audio In" />
                            <iconPacks:PackIconControl Name="addAudioInIcon" Grid.Row="0" Kind="{x:Static iconPacks:PackIconBoxIconsKind.RegularPlusCircle}" HorizontalAlignment="Right" Margin="5 5 25 5" Cursor="Hand" MouseLeftButtonDown="addAudioInIcon_MouseLeftButtonDown" Background="Transparent" />
                            <iconPacks:PackIconControl Name="refreshAudioInIcon" Grid.Row="0" Kind="{x:Static iconPacks:PackIconBoxIconsKind.RegularRefresh}" HorizontalAlignment="Right" Margin="5" Cursor="Hand" MouseLeftButtonDown="refreshAudioInPackIconControl_MouseLeftButtonDown" Background="Transparent" />

                            <StackPanel x:Name="audioInComboBoxPanel" Grid.Row="1" Margin="0 0 0 10">
                                <ComboBox SelectionChanged="AudioInComboBox_SelectionChanged" />
                            </StackPanel>

                            <Label Grid.Row="2" Content="Audio Out" />
                            <iconPacks:PackIconControl Name="refreshAudioOutIcon" Grid.Row="2" Kind="{x:Static iconPacks:PackIconBoxIconsKind.RegularRefresh}" HorizontalAlignment="Right" Margin="5" Cursor="Hand" MouseLeftButtonDown="refreshAudioOutPackIconControl_MouseLeftButtonDown" Background="Transparent" />

                            <Grid Grid.Row="3" Margin="0 0 0 10">
                                <ComboBox x:Name="audioOutComboBox" Height="20" SelectionChanged="audioOutComboBox_SelectionChanged" />
                            </Grid>

                            <Label Grid.Row="4" Content="Video" />
                            <iconPacks:PackIconControl Name="refreshVideoIcon" Grid.Row="4" Kind="{x:Static iconPacks:PackIconBoxIconsKind.RegularRefresh}" HorizontalAlignment="Right" Margin="5" Cursor="Hand" MouseLeftButtonDown="refreshVideoPackIconControl_MouseLeftButtonDown" Background="Transparent" />

                            <Grid Grid.Row="5" Margin="0 0 0 10">
                                <ComboBox x:Name="videoInputComboBox" Height="20" DropDownClosed="videoInputComboBox_DropDownClosed" SelectionChanged="videoInputComboBox_SelectionChanged" />
                            </Grid>

                        </Grid>
                        <Grid Margin="0 0 0 7">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Button Grid.Column="0" x:Name="startButton" Content="Start" Click="startButton_Click" />
                            <Button Grid.Column="1" IsEnabled="False" x:Name="stopButton" Content="Stop" Click="stopButton_Click" />
                        </Grid>
                    </StackPanel>
                </Border>

                <Border Background="#333" VerticalAlignment="Top" HorizontalAlignment="Center" CornerRadius="3" BorderBrush="#222" BorderThickness="2" >
                    <StackPanel Orientation="Horizontal" Margin="3" Background="Transparent">
                        <ComboBox x:Name="ratioComboBox" ToolTip="Ratio" FontSize="15" >
                            <ComboBoxItem Content="16:10" />
                            <ComboBoxItem Content="16:9" IsSelected="True" />
                            <ComboBoxItem Content="4:3" />
                        </ComboBox>

                        <Button Click="ResizeWindowButtonClick" ToolTip="Resize window">
                            <iconPacks:PackIconControl Kind="{x:Static iconPacks:PackIconBoxIconsKind.RegularDesktop}" />
                        </Button>
                    </StackPanel>
                </Border>

                <Border Margin="0 0 -3 0" VerticalAlignment="Top" HorizontalAlignment="Right" BorderBrush="Black" BorderThickness="0" Background="Transparent" >
                    <StackPanel Background="Transparent" Orientation="Horizontal">
                        <Button Margin="0 0 0 0" Click="hideToTaskbarButton_Click" ToolTip="Hide to taskbar" >
                            <iconPacks:PackIconModern Kind="EyeHide" />
                        </Button>
                        <Button Margin="0 0 20 0" Click="topToggleButton_Click" ToolTip="Toggle On-Top" >
                            <iconPacks:PackIconBoxIcons Kind="RegularArrowToTop" />
                        </Button>
                        <Button Margin="0" Click="minimizeButton_Click" ToolTip="Minimize" >
                            <iconPacks:PackIconCodicons Kind="ChromeMinimize" />
                        </Button>
                        <Button Margin="0" Click="closeButton_Click" ToolTip="Exit" >
                            <iconPacks:PackIconCodicons Kind="Close" />
                        </Button>
                    </StackPanel>
                </Border>

                <Border Background="#333" VerticalAlignment="Bottom" HorizontalAlignment="Right" CornerRadius="3" BorderBrush="#222" BorderThickness="2" >
                    <StackPanel Orientation="Vertical">
                        <StackPanel.Resources>
                            <Style TargetType="Label">
                                <Setter Property="Foreground" Value="#E7E4F2" />
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Foreground" Value="#fff" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Resources>
                        <Label FontSize="12" MouseDoubleClick="bottomLabel_MouseDoubleClick" Name="bottomLabel" Content="Well hello there fellow programmer!" Cursor="Hand" MouseLeftButtonDown="webSiteLabel_MouseLeftButtonDown" />
                        <Label x:Name="updateLabel" FontSize="13" Visibility="Collapsed" Foreground="#ABA5EC" Margin="0 -7 0 0" MouseDoubleClick="bottomLabel_MouseDoubleClick" Content="There is an update available." HorizontalAlignment="Center" Cursor="Hand" MouseLeftButtonDown="webSiteLabel_MouseLeftButtonDown" />
                    </StackPanel>
                </Border>

            </Grid>
        </DockPanel>

        <iconPacks:PackIconControl Name="loadingIcon" Opacity="0" d:Opacity="1" Visibility="Visible" Kind="{x:Static iconPacks:PackIconBoxIconsKind.RegularStopCircle}" Spin="False" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White" Width="64" Height="64" />

    </Grid>
</Window>
